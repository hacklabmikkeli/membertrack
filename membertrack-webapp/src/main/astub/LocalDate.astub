package java.time;

class LocalDate implements Temporal, TemporalAdjuster, ChronoLocalDate, Serializable {
    static final LocalDate MIN;
    static final LocalDate MAX;
    static LocalDate now();
    static LocalDate now(ZoneId arg0);
    static LocalDate now(Clock arg0);
    static LocalDate of(int arg0, Month arg1, int arg2);
    static LocalDate of(int arg0, int arg1, int arg2);
    static LocalDate ofYearDay(int arg0, int arg1);
    static LocalDate ofEpochDay(long arg0);
    static LocalDate from(TemporalAccessor arg0);
    static LocalDate parse(CharSequence arg0);
    static LocalDate parse(CharSequence arg0, DateTimeFormatter arg1);
    boolean isSupported(TemporalField arg0);
    boolean isSupported(TemporalUnit arg0);
    ValueRange range(TemporalField arg0);
    int get(TemporalField arg0);
    long getLong(TemporalField arg0);
    IsoChronology getChronology();
    Era getEra();
    int getYear();
    int getMonthValue();
    Month getMonth();
    int getDayOfMonth();
    int getDayOfYear();
    DayOfWeek getDayOfWeek();
    boolean isLeapYear();
    int lengthOfMonth();
    int lengthOfYear();
    LocalDate with(TemporalAdjuster arg0);
    LocalDate with(TemporalField arg0, long arg1);
    LocalDate withYear(int arg0);
    LocalDate withMonth(int arg0);
    LocalDate withDayOfMonth(int arg0);
    LocalDate withDayOfYear(int arg0);
    LocalDate plus(TemporalAmount arg0);
    LocalDate plus(long arg0, TemporalUnit arg1);
    LocalDate plusYears(long arg0);
    LocalDate plusMonths(long arg0);
    LocalDate plusWeeks(long arg0);
    LocalDate plusDays(long arg0);
    LocalDate minus(TemporalAmount arg0);
    LocalDate minus(long arg0, TemporalUnit arg1);
    LocalDate minusYears(long arg0);
    LocalDate minusMonths(long arg0);
    LocalDate minusWeeks(long arg0);
    LocalDate minusDays(long arg0);
    <R> R query(TemporalQuery<R> arg0);
    Temporal adjustInto(Temporal arg0);
    long until(Temporal arg0, TemporalUnit arg1);
    Period until(ChronoLocalDate arg0);
    String format(DateTimeFormatter arg0);
    LocalDateTime atTime(LocalTime arg0);
    LocalDateTime atTime(int arg0, int arg1);
    LocalDateTime atTime(int arg0, int arg1, int arg2);
    LocalDateTime atTime(int arg0, int arg1, int arg2, int arg3);
    OffsetDateTime atTime(OffsetTime arg0);
    LocalDateTime atStartOfDay();
    ZonedDateTime atStartOfDay(ZoneId arg0);
    long toEpochDay();
    int compareTo(ChronoLocalDate arg0);
    boolean isAfter(ChronoLocalDate arg0);
    boolean isBefore(ChronoLocalDate arg0);
    boolean isEqual(ChronoLocalDate arg0);
    boolean equals(Object arg0);
    int hashCode();
    String toString();
}
